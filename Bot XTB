import MetaTrader5 as mt5
import pandas as pd
import time

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# 1. Conectar a MetaTrader5 usando los datos de tu cuenta Exness
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
login = 197297510
server = "Exness-MT5Trial11"
password = "197297510"  # REEMPLAZA con tu contrase√±a real

if not mt5.initialize(login=login, server=server, password=password):
    print("‚ùå Error al inicializar MT5:", mt5.last_error())
    quit()
else:
    print("‚úÖ Conexi√≥n a MetaTrader5 establecida")

# Seleccionar el s√≠mbolo (Bitcoin). Revisa que el nombre del s√≠mbolo sea correcto.
symbol = "BTCUSD"
if not mt5.symbol_select(symbol, True):
    print(f"‚ùå No se pudo seleccionar el s√≠mbolo {symbol}")
    mt5.shutdown()
    quit()

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# 2. Funci√≥n para obtener datos (candles) en H1
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def get_candles(symbol, timeframe, count):
    """
    Obtiene los √∫ltimos 'count' candles para 'symbol' en el timeframe indicado.
    """
    rates = mt5.copy_rates_from_pos(symbol, timeframe, 0, count)
    if rates is None:
        print("‚ùå Error al obtener datos de", symbol)
        return None
    df = pd.DataFrame(rates)
    df['time'] = pd.to_datetime(df['time'], unit='s')
    return df

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# 3. Funci√≥n para calcular la estrategia UT Bot Alerts (versi√≥n simplificada)
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def calculate_ut_bot(df, key_value=1, atr_period=10):
    """
    Calcula un trailing stop y genera una se√±al de posici√≥n (1 para compra, -1 para venta)
    bas√°ndose en una versi√≥n simplificada de la UT Bot Alerts.
    """
    if df is None or df.empty:
        return None
    
    df = df.copy()
    # Calcular una aproximaci√≥n del ATR usando el rango verdadero (aqu√≠ se usa high-low) y su media m√≥vil
    df['true_range'] = df['high'] - df['low']
    df['atr'] = df['true_range'].rolling(window=atr_period).mean()
    df['atr'].fillna(df['true_range'], inplace=True)
    df['n_loss'] = key_value * df['atr']
    
    # Usamos el precio de cierre como fuente
    df['src'] = df['close']
    
    # Inicializar columnas de trailing stop y se√±al
    df['xATRTrailingStop'] = 0.0
    df['pos'] = 0
    
    # Condici√≥n inicial: el trailing stop se iguala al primer cierre
    df.at[df.index[0], 'xATRTrailingStop'] = df['src'].iloc[0]
    df.at[df.index[0], 'pos'] = 0
    
    # Recorrer los datos a partir del segundo candle
    for i in range(1, len(df)):
        prev_stop = df.at[df.index[i-1], 'xATRTrailingStop']
        prev_src = df.at[df.index[i-1], 'src']
        current_src = df.at[df.index[i], 'src']
        current_n_loss = df.at[df.index[i], 'n_loss']
        
        # Replicar la l√≥gica del UT Bot Alerts (adaptada)
        if current_src > prev_stop and prev_src > prev_stop:
            new_stop = max(prev_stop, current_src - current_n_loss)
        elif current_src < prev_stop and prev_src < prev_stop:
            new_stop = min(prev_stop, current_src + current_n_loss)
        else:
            if current_src > prev_stop:
                new_stop = current_src - current_n_loss
            else:
                new_stop = current_src + current_n_loss
        
        df.at[df.index[i], 'xATRTrailingStop'] = new_stop
        
        # Generar la se√±al:
        # Si el candle anterior estuvo por debajo del stop y el actual sube por encima ‚Üí se√±al de compra (1)
        # Si el candle anterior estuvo por encima del stop y el actual cae por debajo ‚Üí se√±al de venta (-1)
        if prev_src < prev_stop and current_src > new_stop:
            df.at[df.index[i], 'pos'] = 1
        elif prev_src > prev_stop and current_src < new_stop:
            df.at[df.index[i], 'pos'] = -1
        else:
            df.at[df.index[i], 'pos'] = df.at[df.index[i-1], 'pos']
    
    return df

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# 4. Funci√≥n para enviar √≥rdenes a trav√©s de MT5
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def place_order(symbol, order_type, volume):
    """
    Env√≠a una orden de mercado (compra o venta) para el s√≠mbolo indicado.
    """
    # Obtener el precio actual
    if order_type == "BUY":
        price = mt5.symbol_info_tick(symbol).ask
        mt5_order_type = mt5.ORDER_TYPE_BUY
    elif order_type == "SELL":
        price = mt5.symbol_info_tick(symbol).bid
        mt5_order_type = mt5.ORDER_TYPE_SELL
    else:
        print("‚ùå Tipo de orden inv√°lido")
        return None

    # Preparar la solicitud de orden
    request = {
        "action": mt5.TRADE_ACTION_DEAL,
        "symbol": symbol,
        "volume": volume,
        "type": mt5_order_type,
        "price": price,
        "deviation": 20,
        "magic": 234000,
        "comment": "Orden UT Bot Alerts",
        "type_time": mt5.ORDER_TIME_GTC,
        "type_filling": mt5.ORDER_FILLING_FOK,
    }

    # Enviar la orden
    result = mt5.order_send(request)
    return result

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# 5. Funci√≥n principal del bot
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def run_bot():
    print("üöÄ Ejecutando UT Bot para Exness (MT5) en Bitcoin (H1)")
    
    # Obtener los √∫ltimos 100 candles en H1
    df = get_candles(symbol, mt5.TIMEFRAME_H1, 100)
    if df is None:
        return
    
    # Calcular la estrategia UT Bot Alerts
    df = calculate_ut_bot(df, key_value=1, atr_period=10)
    if df is None:
        return
    
    # Mostrar el √∫ltimo dato calculado (puedes imprimir df.tail() para depurar)
    last_row = df.iloc[-1]
    signal = last_row['pos']
    print(f"√öltima se√±al calculada: {signal}")
    
    # Ejemplo: si la se√±al es 1 ‚Üí compra; si es -1 ‚Üí venta; si es 0 ‚Üí sin acci√≥n.
    volume = 0.01  # Ajusta el volumen seg√∫n tus necesidades y tama√±o de cuenta
    if signal == 1:
        print("‚úÖ Se√±al de COMPRA detectada")
        result = place_order(symbol, "BUY", volume)
        print("Resultado de la orden:", result)
    elif signal == -1:
        print("‚ùå Se√±al de VENTA detectada")
        result = place_order(symbol, "SELL", volume)
        print("Resultado de la orden:", result)
    else:
        print("‚ÑπÔ∏è Sin se√±al clara, no se ejecuta orden.")

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# 6. Ejecutar el bot y cerrar la conexi√≥n
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
if __name__ == "__main__":
    run_bot()
    mt5.shutdown()
