import MetaTrader5 as mt5
import pandas as pd
import time

# ─────────────────────────────────────────────────────────────
# 1. Conectar a MetaTrader5 usando los datos de tu cuenta Exness
# ─────────────────────────────────────────────────────────────
login = 197297510
server = "Exness-MT5Trial11"
password = "197297510"  # REEMPLAZA con tu contraseña real

if not mt5.initialize(login=login, server=server, password=password):
    print("❌ Error al inicializar MT5:", mt5.last_error())
    quit()
else:
    print("✅ Conexión a MetaTrader5 establecida")

# Seleccionar el símbolo (Bitcoin)
symbol = "BTCUSD"
if not mt5.symbol_select(symbol, True):
    print(f"❌ No se pudo seleccionar el símbolo {symbol}")
    mt5.shutdown()
    quit()

lot_size = 0.02  # Tamaño fijo del lote

# ─────────────────────────────────────────────────────────────
# 2. Función para obtener datos (candles) en H1
# ─────────────────────────────────────────────────────────────
def get_candles(symbol, timeframe, count):
    rates = mt5.copy_rates_from_pos(symbol, timeframe, 0, count)
    if rates is None:
        print("❌ Error al obtener datos de", symbol)
        return None
    df = pd.DataFrame(rates)
    df['time'] = pd.to_datetime(df['time'], unit='s')
    return df

# ─────────────────────────────────────────────────────────────
# 3. Función para calcular la estrategia simplificada
# ─────────────────────────────────────────────────────────────
def calculate_ut_bot(df, key_value=1, atr_period=10):
    df['signal'] = None
    for i in range(atr_period, len(df)):
        if df['close'][i] > df['open'][i]:
            df.at[i, 'signal'] = 'buy'
        elif df['close'][i] < df['open'][i]:
            df.at[i, 'signal'] = 'sell'
    return df

# ─────────────────────────────────────────────────────────────
# 4. Función para enviar órdenes de compra/venta
# ─────────────────────────────────────────────────────────────
def place_order(symbol, order_type, lot_size):
    price = mt5.symbol_info_tick(symbol).ask if order_type == 'buy' else mt5.symbol_info_tick(symbol).bid

    request = {
        "action": mt5.TRADE_ACTION_DEAL,
        "symbol": symbol,
        "volume": lot_size,
        "type": mt5.ORDER_TYPE_BUY if order_type == 'buy' else mt5.ORDER_TYPE_SELL,
        "price": price,
        "deviation": 20,
        "magic": 234000,
        "comment": "Bot Exness Order",
        "type_time": mt5.ORDER_TIME_GTC,
        "type_filling": mt5.ORDER_FILLING_IOC,
    }

    result = mt5.order_send(request)
    if result.retcode != mt5.TRADE_RETCODE_DONE:
        print(f"❌ Error al ejecutar orden {order_type}:", result.comment)
    else:
        print(f"✅ Orden {order_type} ejecutada con éxito.")

# ─────────────────────────────────────────────────────────────
# 5. Ejecutar la estrategia de trading
# ─────────────────────────────────────────────────────────────
while True:
    candles = get_candles(symbol, mt5.TIMEFRAME_H1, 50)
    if candles is not None:
        signals = calculate_ut_bot(candles)
        last_signal = signals.iloc[-1]['signal']

        if last_signal == 'buy':
            print("🚀 Señal de COMPRA detectada")
            place_order(symbol, 'buy', lot_size)
        elif last_signal == 'sell':
            print("🔻 Señal de VENTA detectada")
            place_order(symbol, 'sell', lot_size)
        else:
            print("⏳ Sin señales por ahora")
    
    time.sleep(60 * 15)  # Espera 15 minutos antes de la siguiente iteración

# ─────────────────────────────────────────────────────────────
# 6. Cerrar la conexión al finalizar
# ─────────────────────────────────────────────────────────────
mt5.shutdown()
print("🚪 Conexión a MetaTrader5 cerrada")

